//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Input
{
    using System;
    using System.ComponentModel.Design;
    using Microsoft.VisualStudio.Shell;
    
    internal partial class GuidSymbols
    {
        public const string guidPackageString = "A93DDA80-8D73-400F-B274-3BCB18A34376";
        public const string guidPackageMenusString = "D3195836-EDD9-4BC6-8203-13EF124CFA16";
        public const string guidPackageGroupsString = "B0412A25-EDCE-41A2-8F87-9A3B562AA858";
        public const string guidPackageCmdSetString = "11479980-4e78-473f-8fce-7988501f8914";
        public static Guid guidPackage = new Guid(guidPackageString);
        public static Guid guidPackageMenus = new Guid(guidPackageMenusString);
        public static Guid guidPackageGroups = new Guid(guidPackageGroupsString);
        public static Guid guidPackageCmdSet = new Guid(guidPackageCmdSetString);
    }
    /// <summary>
    /// Represents the <see cref="IDSymbols"/> class.
    /// </summary>
    internal partial class IDSymbols
    {
        public const int IDM_SOLUTION = 1;
        public const int IDG_SOLUTION = 1;
        public const int cmdidNewSolution = 256;
    }
    /// <summary>
    /// Represents the <see cref="Commands"/> class.
    /// </summary>
    internal partial class Commands
    {
        public static CommandID cmdidNewSolutionCommandId = new CommandID(GuidSymbols.guidPackageCmdSet, IDSymbols.cmdidNewSolution);
    }
    /// <summary>
    ///  Serves as the abstract base for classes that handle commands.
    /// </summary>
    internal abstract partial class AbstractCommandHandler
    {
        /// <summary>
        ///  Initializes a new instance of the <see cref="AbstractCommandHandler"/> class.
        /// </summary>
        protected AbstractCommandHandler()
        {
        }
        /// <summary>
        /// When overridden in a derived class, handles the cmdidNewSolution command.
        /// </summary>
        /// <param name="sender">The <see cref="object"/> initiating the command.</param>
        /// <param name="e">The <see cref="EventArgs"/> that will ultimately handle the command.</param>
        public virtual void OnExecuteCmdidNewSolution(object sender, EventArgs e)
        {
        }
    }
    /// <summary>
    ///  Entry point for handling commands.
    /// </summary>
    internal partial class CommandHandler : AbstractCommandHandler
    {
    }
    /// <summary>
    ///  Does the job no one else will do, and registers the commands.
    /// </summary>
    internal partial class CommandRegistrar
    {
        /// <summary>
        /// Registers the commands.
        /// </summary>
        /// <param name="service">the <see cref="OleMenuCommandService"/> that services the commands</param>
        /// <param name="handler">the <see cref="CommandHandler"/> class containing all of the handlers to the commands</param>
        public static void RegisterCommands(OleMenuCommandService service, CommandHandler handler)
        {
            RegisterCommand(service, Commands.cmdidNewSolutionCommandId, handler.OnExecuteCmdidNewSolution);
        }
        /// <summary>
        /// Registers a command.
        /// </summary>
        /// <param name="service">the OleCommandService that services the commands</param>
        /// <param name="cmdId">the CommandID that identifies the command</param>
        /// <param name="commandHanlder">the EventHandler responsible for handling the command</param>
        public static void RegisterCommand(OleMenuCommandService service, CommandID cmdId, EventHandler commandHandler)
        {
            OleMenuCommand command = new OleMenuCommand(commandHandler, cmdId);
            service.AddCommand(command);
        }
    }
}

